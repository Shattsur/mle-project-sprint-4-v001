import pandas as pd
import boto3
from botocore.exceptions import ClientError
from botocore.config import Config
import os
from dotenv import load_dotenv
import tempfile

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

def check_s3_data_files():
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è S3
    aws_access_key = os.getenv("AWS_ACCESS_KEY_ID")
    aws_secret_access_key = os.getenv("AWS_SECRET_ACCESS_KEY")
    bucket_name = os.getenv("S3_BUCKET_NAME")
    
    # –°–æ–∑–¥–∞—ë–º –∫–ª–∏–µ–Ω—Ç S3
    s3_config = Config(
        region_name='ru-central1',
        signature_version='s3v4',
        s3={'addressing_style': 'path'}
    )

    s3 = boto3.client(
        's3',
        endpoint_url='https://storage.yandexcloud.net',
        aws_access_key_id=aws_access_key,
        aws_secret_access_key=aws_secret_access_key,
        config=s3_config
    )
    
    # –§–∞–π–ª—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ S3
    files = {
        "items.parquet": "recsys/data/items.parquet",
        "similar.parquet": "recsys/recommendations/similar.parquet",
        "personal_als.parquet": "recsys/recommendations/personal_als.parquet", 
        "top_popular.parquet": "recsys/recommendations/top_popular.parquet"
    }
    
    print("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –¥–∞–Ω–Ω—ã—Ö –≤ S3:")
    print("=" * 50)
    print(f"–ë–∞–∫–µ—Ç: {bucket_name}")
    print("=" * 50)
    
    for name, s3_key in files.items():
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –≤ S3 
            s3.head_object(Bucket=bucket_name, Key=s3_key)
            print(f"‚úÖ {name}: –§–∞–π–ª –Ω–∞–π–¥–µ–Ω –≤ S3")
            
            # –°–∫–∞—á–∏–≤–∞–µ–º –∏ —á–∏—Ç–∞–µ–º —Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
            try:
                # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                with tempfile.NamedTemporaryFile(delete=False, suffix='.parquet') as temp_file:
                    temp_path = temp_file.name
                
                # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                s3.download_file(Bucket=bucket_name, Key=s3_key, Filename=temp_path)
                
                # –ß–∏—Ç–∞–µ–º –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
                df = pd.read_parquet(temp_path)
                print(f"   üìä –ó–∞–ø–∏—Å–µ–π: {len(df):,}")
                if len(df) > 0:
                    print(f"   üìã –ö–æ–ª–æ–Ω–∫–∏: {list(df.columns)}")
                    if 'track_id' in df.columns:
                        sample_ids = df['track_id'].iloc[:3].tolist()
                        print(f"   üéµ –ü—Ä–∏–º–µ—Ä track_id: {sample_ids}")
                
                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                os.unlink(temp_path)
                
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
                # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
                if 'temp_path' in locals() and os.path.exists(temp_path):
                    os.unlink(temp_path)
                
        except ClientError as e:
            if e.response['Error']['Code'] == '404':
                print(f"‚ùå {name}: –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ S3 –ø–æ –ø—É—Ç–∏ {s3_key}")
            else:
                print(f"‚ùå {name}: –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ S3 - {e}")

def check_s3_connection():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ S3 –∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –±–∞–∫–µ—Ç–∞"""
    try:
        aws_access_key = os.getenv("AWS_ACCESS_KEY_ID")
        aws_secret_access_key = os.getenv("AWS_SECRET_ACCESS_KEY")
        bucket_name = os.getenv("S3_BUCKET_NAME")
        
        s3_config = Config(
            region_name='ru-central1',
            signature_version='s3v4',
            s3={'addressing_style': 'path'}
        )

        s3 = boto3.client(
            's3',
            endpoint_url='https://storage.yandexcloud.net',
            aws_access_key_id=aws_access_key,
            aws_secret_access_key=aws_secret_access_key,
            config=s3_config
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –±–∞–∫–µ—Ç–∞ 
        s3.head_bucket(Bucket=bucket_name)
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ S3 —É—Å–ø–µ—à–Ω–æ")
        print(f"‚úÖ –ë–∞–∫–µ—Ç '{bucket_name}' –¥–æ—Å—Ç—É–ø–µ–Ω")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ S3: {e}")
        return False

def get_file_sizes():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–∞–∑–º–µ—Ä—ã —Ñ–∞–π–ª–æ–≤ –≤ S3"""
    aws_access_key = os.getenv("AWS_ACCESS_KEY_ID")
    aws_secret_access_key = os.getenv("AWS_SECRET_ACCESS_KEY")
    bucket_name = os.getenv("S3_BUCKET_NAME")
    
    s3_config = Config(
        region_name='ru-central1',
        signature_version='s3v4',
        s3={'addressing_style': 'path'}
    )

    s3 = boto3.client(
        's3',
        endpoint_url='https://storage.yandexcloud.net',
        aws_access_key_id=aws_access_key,
        aws_secret_access_key=aws_secret_access_key,
        config=s3_config
    )
    
    files = {
        "items.parquet": "recsys/data/items.parquet",
        "similar.parquet": "recsys/recommendations/similar.parquet",
        "personal_als.parquet": "recsys/recommendations/personal_als.parquet", 
        "top_popular.parquet": "recsys/recommendations/top_popular.parquet"
    }
    
    print(f"\nüìè –†–∞–∑–º–µ—Ä—ã —Ñ–∞–π–ª–æ–≤ –≤ S3:")
    print("=" * 50)
    
    for name, s3_key in files.items():
        try:
            response = s3.head_object(Bucket=bucket_name, Key=s3_key)
            size_mb = response['ContentLength'] / (1024 * 1024)
            last_modified = response['LastModified']
            print(f"   {name}: {size_mb:.2f} MB (–æ–±–Ω–æ–≤–ª–µ–Ω: {last_modified})")
        except Exception as e:
            print(f"   {name}: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–∞–∑–º–µ—Ä - {e}")

if __name__ == "__main__":
    print("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ S3...")
    if check_s3_connection():
        print("\n" + "="*50)
        check_s3_data_files()
        get_file_sizes()
    else:
        print("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ S3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è.")